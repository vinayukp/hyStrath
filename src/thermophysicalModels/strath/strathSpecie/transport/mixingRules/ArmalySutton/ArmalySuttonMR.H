/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2016-2020 hyStrath
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of hyStrath, a derivative work of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::ArmalySuttonMR

Description
    ArmalySuttonMR model.

SourceFiles
    ArmalySuttonMR.C

\*---------------------------------------------------------------------------*/

#ifndef ArmalySuttonMR_H
#define ArmalySuttonMR_H

#include "mixingRule.H"
#include "scalarMatrices.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                             Class ArmalySuttonMR Declaration
\*---------------------------------------------------------------------------*/

template<class ThermoType>
class ArmalySuttonMR
:
    public mixingRule
{

protected:

    // Protected data

        //- Thermodynamic data of the species
        const PtrList<ThermoType>& speciesThermo_;

        // Scaling parameter in the Armaly-Sutton mixing rule
        PtrList<volScalarField> phi_;

        // Additional quantities in Armaly-Sutton mixing rule
        scalarSymmetricSquareMatrix AijZ_, Bij_;

        // Original or corrected Armaly-Sutton formulation?
        bool correctedArmalySutton_;

        // Mole-fraction below which the contribution of the species is ignored
        const scalar miniXs_;


    // Protected member functions

        //- Update the coefficients of the species equations
        virtual void updatePhi();


public:

    //- Runtime type information
    TypeName("ArmalySutton");


    // Constructors

        //- Construct from components
        ArmalySuttonMR
        (
            rho2ReactionThermo& thermo,
            const compressibleTurbulenceModel& turbulence
        );


      //- Destructor
      ~ArmalySuttonMR()
      {}


    // Member Functions

        //- Molar weight for a specie given by index. Defined here
        //  becouse depends on thermoType template
        inline virtual scalar W(const label i) const
        {
            return speciesThermo_[i].W();
        }

        //- Viscosity for a specie given by index. Defined here
        //  becouse depends on thermoType template
        inline virtual scalar mu(const label i, const scalar p, const scalar Tt) const
        {
            return speciesThermo_[i].mu(p, Tt);
        }

        //- Thermal conductivity, trans-rotational mode,
        //  for a specie given by index.
        inline virtual scalar kappatr(const label i, const scalar p, const scalar Tt) const
        {
            return speciesThermo_[i].kappatr(p, Tt);
        }

        //- Thermal conductivity, vib-electronic mode,
        //  for a specie given by index.
        inline virtual scalar kappave(const label i, const scalar p, const scalar Tt, const scalar Tve) const
        {
            return speciesThermo_[i].kappave(p, Tt, Tve);
        }

        //- Thermal diffusivity [kg/ms], trans-rotational mode,
        //  for a specie given by index.
        inline virtual scalar alphatr(const label i, const scalar p, const scalar Tt) const
        {
            return speciesThermo_[i].alphatr(p, Tt);
        }

        //- Thermal diffusivity [kg/ms], vib-electronic mode,
        //  for a specie given by index.
        inline virtual scalar alphave(const label i, const scalar p, const scalar Tt, const scalar Tve) const
        {
            return speciesThermo_[i].alphave(p, Tt, Tve);
        }


        //Quantities in Armaly-Sutton mixing rule scaling parameter
        inline scalar AijZ(const label i, const label j)
        {
            return AijZ_[max(i,j)][min(i,j)];
        }

        inline scalar Fij(const label i, const label j)
        {
            // Assumed equal to 1 for all interactions
            return 1.0;
        }

        inline scalar Bij(const label i, const label j)
        {
            return Bij_[max(i,j)][min(i,j)];
        }

        // Calculations and updates of the different fields
        virtual void correct();

        //- Write the user-defined ArmalySuttonMR quantities
        virtual void write();

        //- Read transportProperties dictionary
        virtual bool read();
  };


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

}	// End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#ifdef NoRepository
#   include "ArmalySuttonMR.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
